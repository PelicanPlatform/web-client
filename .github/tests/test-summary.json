{"numFailedTestSuites":2,"numFailedTests":0,"numPassedTestSuites":1,"numPassedTests":9,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":2,"numTodoTests":0,"numTotalTestSuites":3,"numTotalTests":9,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1760726030208,"success":false,"testResults":[{"assertionResults":[],"coverage":{},"endTime":1760726037354,"message":"  ● Test suite failed to run\n\n    \u001b[96mtest/util.test.ts\u001b[0m:\u001b[93m2\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2305: \u001b[0mModule '\"../src/util\"' has no exported member 'parseHeader'.\n\n    \u001b[7m2\u001b[0m import { parseHeader, parseLinkHeader } from \"../src/util\";\n    \u001b[7m \u001b[0m \u001b[91m         ~~~~~~~~~~~\u001b[0m\n","name":"/home/runner/work/web-client/web-client/test/util.test.ts","startTime":1760726037354,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1760726037354,"message":"  ● Test suite failed to run\n\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m17\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 0 arguments, but got 1.\n\n    \u001b[7m17\u001b[0m         let client = new Client(\"https://example.com\");\n    \u001b[7m  \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m19\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getMetadata' does not exist on type 'Client'.\n\n    \u001b[7m19\u001b[0m         await expect(client.getMetadata()).rejects.toThrow(\n    \u001b[7m  \u001b[0m \u001b[91m                            ~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m35\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 0 arguments, but got 1.\n\n    \u001b[7m35\u001b[0m         let client = new Client(\"https://example.com\");\n    \u001b[7m  \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m37\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getMetadata' does not exist on type 'Client'.\n\n    \u001b[7m37\u001b[0m         await expect(client.getMetadata()).rejects.toThrow(\n    \u001b[7m  \u001b[0m \u001b[91m                            ~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m44\u001b[0m:\u001b[93m38\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2769: \u001b[0mNo overload matches this call.\n      Overload 1 of 3, '(object: Client, method: never): SpyInstance<never, never, any>', gave the following error.\n        Argument of type '\"getMetadata\"' is not assignable to parameter of type 'never'.\n      Overload 2 of 3, '(object: Client, method: \"get\" | \"list\" | \"put\" | \"permissions\" | \"parseObjectUrl\" | \"exchangeCodeForToken\" | \"getFederation\" | \"getNamespace\" | \"queueRequestAndStartFlow\" | \"processQueuedObjectRequest\"): SpyInstance<...>', gave the following error.\n        Argument of type '\"getMetadata\"' is not assignable to parameter of type '\"get\" | \"list\" | \"put\" | \"permissions\" | \"parseObjectUrl\" | \"exchangeCodeForToken\" | \"getFederation\" | \"getNamespace\" | \"queueRequestAndStartFlow\" | \"processQueuedObjectRequest\"'.\n\n    \u001b[7m44\u001b[0m             .spyOn(Client.prototype, \"getMetadata\")\n    \u001b[7m  \u001b[0m \u001b[91m                                     ~~~~~~~~~~~~~\u001b[0m\n\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m45\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any>' is not assignable to parameter of type '() => ProxiedValue<Record<string, Federation>> | Record<string, string> | ProxiedValue<QueuedRequest[]> | ... 10 more ... | (() => Promise<...>)'.\n      Type 'Promise<any>' is not assignable to type 'ProxiedValue<Record<string, Federation>> | Record<string, string> | ProxiedValue<QueuedRequest[]> | ... 10 more ... | (() => Promise<...>)'.\n        Type 'Promise<any>' is not assignable to type 'Record<string, string>'.\n          Index signature for type 'string' is missing in type 'Promise<any>'.\n\n    \u001b[7m45\u001b[0m             .mockImplementation(async (): Promise<any> => {\n    \u001b[7m  \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m51\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 0 arguments, but got 1.\n\n    \u001b[7m51\u001b[0m         let client = new Client(\"https://example.com\");\n    \u001b[7m  \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m53\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getObject' does not exist on type 'Client'.\n\n    \u001b[7m53\u001b[0m         await expect(client.getObject(\"/test.txt\")).rejects.toThrow(\"Metadata does not contain director_endpoint\");\n    \u001b[7m  \u001b[0m \u001b[91m                            ~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m63\u001b[0m:\u001b[93m61\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2769: \u001b[0mNo overload matches this call.\n      Overload 1 of 3, '(object: typeof import(\"/home/runner/work/web-client/web-client/src/Client\"), method: \"Client\" | \"default\"): SpyInstance<Client, [], any>', gave the following error.\n        Argument of type '\"downloadUrl\"' is not assignable to parameter of type '\"Client\" | \"default\"'.\n      Overload 2 of 3, '(object: typeof import(\"/home/runner/work/web-client/web-client/src/Client\"), method: never): SpyInstance<never, never, any>', gave the following error.\n        Argument of type '\"downloadUrl\"' is not assignable to parameter of type 'never'.\n\n    \u001b[7m63\u001b[0m         const downloadUrlMock = jest.spyOn(ClientFunctions, \"downloadUrl\").mockImplementationOnce(async () => {});\n    \u001b[7m  \u001b[0m \u001b[91m                                                            ~~~~~~~~~~~~~\u001b[0m\n\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m63\u001b[0m:\u001b[93m99\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<void>' is not assignable to parameter of type '() => typeof Client'.\n      Property 'prototype' is missing in type 'Promise<void>' but required in type 'typeof Client'.\n\n    \u001b[7m63\u001b[0m         const downloadUrlMock = jest.spyOn(ClientFunctions, \"downloadUrl\").mockImplementationOnce(async () => {});\n    \u001b[7m  \u001b[0m \u001b[91m                                                                                                  ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m66\u001b[0m:\u001b[93m38\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2769: \u001b[0mNo overload matches this call.\n      Overload 1 of 3, '(object: Client, method: never): SpyInstance<never, never, any>', gave the following error.\n        Argument of type '\"getMetadata\"' is not assignable to parameter of type 'never'.\n      Overload 2 of 3, '(object: Client, method: \"get\" | \"list\" | \"put\" | \"permissions\" | \"parseObjectUrl\" | \"exchangeCodeForToken\" | \"getFederation\" | \"getNamespace\" | \"queueRequestAndStartFlow\" | \"processQueuedObjectRequest\"): SpyInstance<...>', gave the following error.\n        Argument of type '\"getMetadata\"' is not assignable to parameter of type '\"get\" | \"list\" | \"put\" | \"permissions\" | \"parseObjectUrl\" | \"exchangeCodeForToken\" | \"getFederation\" | \"getNamespace\" | \"queueRequestAndStartFlow\" | \"processQueuedObjectRequest\"'.\n\n    \u001b[7m66\u001b[0m             .spyOn(Client.prototype, \"getMetadata\")\n    \u001b[7m  \u001b[0m \u001b[91m                                     ~~~~~~~~~~~~~\u001b[0m\n\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m67\u001b[0m:\u001b[93m37\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any>' is not assignable to parameter of type '() => ProxiedValue<Record<string, Federation>> | Record<string, string> | ProxiedValue<QueuedRequest[]> | ... 10 more ... | (() => Promise<...>)'.\n      Type 'Promise<any>' is not assignable to type 'ProxiedValue<Record<string, Federation>> | Record<string, string> | ProxiedValue<QueuedRequest[]> | ... 10 more ... | (() => Promise<...>)'.\n        Type 'Promise<any>' is not assignable to type 'Record<string, string>'.\n          Index signature for type 'string' is missing in type 'Promise<any>'.\n\n    \u001b[7m67\u001b[0m             .mockImplementationOnce(async (): Promise<any> => {\n    \u001b[7m  \u001b[0m \u001b[91m                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m85\u001b[0m:\u001b[93m33\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 0 arguments, but got 1.\n\n    \u001b[7m85\u001b[0m         let client = new Client(\"https://example.com\");\n    \u001b[7m  \u001b[0m \u001b[91m                                ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m86\u001b[0m:\u001b[93m22\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getObject' does not exist on type 'Client'.\n\n    \u001b[7m86\u001b[0m         await client.getObject(testFilePath);\n    \u001b[7m  \u001b[0m \u001b[91m                     ~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m105\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'downloadUrl' does not exist on type 'typeof import(\"/home/runner/work/web-client/web-client/src/Client\")'.\n\n    \u001b[7m105\u001b[0m         ClientFunctions.downloadUrl(testBlobUrl, testFileName);\n    \u001b[7m   \u001b[0m \u001b[91m                        ~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m129\u001b[0m:\u001b[93m25\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'downloadUrl' does not exist on type 'typeof import(\"/home/runner/work/web-client/web-client/src/Client\")'.\n\n    \u001b[7m129\u001b[0m         ClientFunctions.downloadUrl(testBlobUrl);\n    \u001b[7m   \u001b[0m \u001b[91m                        ~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m142\u001b[0m:\u001b[93m35\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 0 arguments, but got 1.\n\n    \u001b[7m142\u001b[0m         const client = new Client(\"https://127.0.0.1:80\");\n    \u001b[7m   \u001b[0m \u001b[91m                                  ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m143\u001b[0m:\u001b[93m22\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getObject' does not exist on type 'Client'.\n\n    \u001b[7m143\u001b[0m         await client.getObject(\"/mnt/test.txt\");\n    \u001b[7m   \u001b[0m \u001b[91m                     ~~~~~~~~~\u001b[0m\n","name":"/home/runner/work/web-client/web-client/test/index.test.ts","startTime":1760726037354,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing sessionObject"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Create a session backed object","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"Create a session backed object"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Modify a property and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Modify a property and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Modify a nested property and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Modify a nested property and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Add a new property and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Add a new property and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Delete a property and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Delete a property and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Add a value to a list and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Add a value to a list and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Delete a value from a list and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Delete a value from a list and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Delete a value from a nested object and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Delete a value from a nested object and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Create a proxied object then set its value to a empty object","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Create a proxied object then set its value to a empty object"}],"endTime":1760726037259,"message":"","name":"/home/runner/work/web-client/web-client/test/sessionStorage.test.ts","startTime":1760726030920,"status":"passed","summary":""}],"wasInterrupted":false,"coverageMap":{"/home/runner/work/web-client/web-client/src/util/sessionObject.ts":{"path":"/home/runner/work/web-client/web-client/src/util/sessionObject.ts","statementMap":{"0":{"start":{"line":11,"column":33},"end":{"line":11,"column":64}},"1":{"start":{"line":14,"column":21},"end":{"line":14,"column":48}},"2":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"3":{"start":{"line":16,"column":8},"end":{"line":16,"column":72}},"4":{"start":{"line":20,"column":4},"end":{"line":20,"column":60}},"5":{"start":{"line":21,"column":4},"end":{"line":21,"column":65}},"6":{"start":{"line":25,"column":4},"end":{"line":59,"column":6}},"7":{"start":{"line":28,"column":26},"end":{"line":28,"column":51}},"8":{"start":{"line":29,"column":12},"end":{"line":34,"column":13}},"9":{"start":{"line":30,"column":16},"end":{"line":33,"column":18}},"10":{"start":{"line":32,"column":58},"end":{"line":32,"column":109}},"11":{"start":{"line":36,"column":12},"end":{"line":36,"column":25}},"12":{"start":{"line":40,"column":12},"end":{"line":45,"column":13}},"13":{"start":{"line":41,"column":16},"end":{"line":44,"column":18}},"14":{"start":{"line":43,"column":58},"end":{"line":43,"column":109}},"15":{"start":{"line":46,"column":28},"end":{"line":46,"column":60}},"16":{"start":{"line":47,"column":12},"end":{"line":49,"column":13}},"17":{"start":{"line":48,"column":16},"end":{"line":48,"column":68}},"18":{"start":{"line":50,"column":12},"end":{"line":50,"column":27}},"19":{"start":{"line":53,"column":28},"end":{"line":53,"column":61}},"20":{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},"21":{"start":{"line":55,"column":16},"end":{"line":55,"column":68}},"22":{"start":{"line":57,"column":12},"end":{"line":57,"column":27}},"23":{"start":{"line":63,"column":4},"end":{"line":88,"column":6}},"24":{"start":{"line":65,"column":26},"end":{"line":65,"column":51}},"25":{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},"26":{"start":{"line":67,"column":16},"end":{"line":67,"column":88}},"27":{"start":{"line":69,"column":12},"end":{"line":69,"column":25}},"28":{"start":{"line":72,"column":12},"end":{"line":74,"column":13}},"29":{"start":{"line":73,"column":16},"end":{"line":73,"column":89}},"30":{"start":{"line":75,"column":28},"end":{"line":75,"column":60}},"31":{"start":{"line":76,"column":12},"end":{"line":78,"column":13}},"32":{"start":{"line":77,"column":16},"end":{"line":77,"column":32}},"33":{"start":{"line":79,"column":12},"end":{"line":79,"column":27}},"34":{"start":{"line":82,"column":28},"end":{"line":82,"column":61}},"35":{"start":{"line":83,"column":12},"end":{"line":85,"column":13}},"36":{"start":{"line":84,"column":16},"end":{"line":84,"column":32}},"37":{"start":{"line":86,"column":12},"end":{"line":86,"column":27}},"38":{"start":{"line":92,"column":4},"end":{"line":92,"column":55}},"39":{"start":{"line":95,"column":0},"end":{"line":95,"column":29}}},"fnMap":{"0":{"name":"sessionObject","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":22}},"loc":{"start":{"line":9,"column":62},"end":{"line":22,"column":1}}},"1":{"name":"createSessionObjectHandler","decl":{"start":{"line":24,"column":9},"end":{"line":24,"column":35}},"loc":{"start":{"line":24,"column":65},"end":{"line":60,"column":1}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":26,"column":13},"end":{"line":26,"column":23}},"loc":{"start":{"line":26,"column":46},"end":{"line":37,"column":9}}},"3":{"name":"(anonymous_3)","decl":{"start":{"line":32,"column":52},"end":{"line":32,"column":55}},"loc":{"start":{"line":32,"column":58},"end":{"line":32,"column":109}}},"4":{"name":"(anonymous_4)","decl":{"start":{"line":38,"column":13},"end":{"line":38,"column":23}},"loc":{"start":{"line":38,"column":58},"end":{"line":51,"column":9}}},"5":{"name":"(anonymous_5)","decl":{"start":{"line":43,"column":52},"end":{"line":43,"column":55}},"loc":{"start":{"line":43,"column":58},"end":{"line":43,"column":109}}},"6":{"name":"(anonymous_6)","decl":{"start":{"line":52,"column":8},"end":{"line":52,"column":22}},"loc":{"start":{"line":52,"column":52},"end":{"line":58,"column":9}}},"7":{"name":"createSessionObjectChildHandler","decl":{"start":{"line":62,"column":9},"end":{"line":62,"column":40}},"loc":{"start":{"line":62,"column":84},"end":{"line":89,"column":1}}},"8":{"name":"(anonymous_8)","decl":{"start":{"line":64,"column":13},"end":{"line":64,"column":23}},"loc":{"start":{"line":64,"column":46},"end":{"line":70,"column":9}}},"9":{"name":"(anonymous_9)","decl":{"start":{"line":71,"column":13},"end":{"line":71,"column":23}},"loc":{"start":{"line":71,"column":58},"end":{"line":80,"column":9}}},"10":{"name":"(anonymous_10)","decl":{"start":{"line":81,"column":8},"end":{"line":81,"column":22}},"loc":{"start":{"line":81,"column":52},"end":{"line":87,"column":9}}},"11":{"name":"isObjectOrArray","decl":{"start":{"line":91,"column":9},"end":{"line":91,"column":24}},"loc":{"start":{"line":91,"column":35},"end":{"line":93,"column":1}}}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":17,"column":5}}]},"1":{"loc":{"start":{"line":20,"column":47},"end":{"line":20,"column":57}},"type":"binary-expr","locations":[{"start":{"line":20,"column":47},"end":{"line":20,"column":51}},{"start":{"line":20,"column":55},"end":{"line":20,"column":57}}]},"2":{"loc":{"start":{"line":21,"column":24},"end":{"line":21,"column":41}},"type":"binary-expr","locations":[{"start":{"line":21,"column":24},"end":{"line":21,"column":28}},{"start":{"line":21,"column":33},"end":{"line":21,"column":41}}]},"3":{"loc":{"start":{"line":29,"column":12},"end":{"line":34,"column":13}},"type":"if","locations":[{"start":{"line":29,"column":12},"end":{"line":34,"column":13}}]},"4":{"loc":{"start":{"line":40,"column":12},"end":{"line":45,"column":13}},"type":"if","locations":[{"start":{"line":40,"column":12},"end":{"line":45,"column":13}}]},"5":{"loc":{"start":{"line":47,"column":12},"end":{"line":49,"column":13}},"type":"if","locations":[{"start":{"line":47,"column":12},"end":{"line":49,"column":13}}]},"6":{"loc":{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},"type":"if","locations":[{"start":{"line":54,"column":12},"end":{"line":56,"column":13}}]},"7":{"loc":{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},"type":"if","locations":[{"start":{"line":66,"column":12},"end":{"line":68,"column":13}}]},"8":{"loc":{"start":{"line":72,"column":12},"end":{"line":74,"column":13}},"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":74,"column":13}}]},"9":{"loc":{"start":{"line":76,"column":12},"end":{"line":78,"column":13}},"type":"if","locations":[{"start":{"line":76,"column":12},"end":{"line":78,"column":13}}]},"10":{"loc":{"start":{"line":83,"column":12},"end":{"line":85,"column":13}},"type":"if","locations":[{"start":{"line":83,"column":12},"end":{"line":85,"column":13}}]},"11":{"loc":{"start":{"line":92,"column":11},"end":{"line":92,"column":54}},"type":"binary-expr","locations":[{"start":{"line":92,"column":11},"end":{"line":92,"column":36}},{"start":{"line":92,"column":40},"end":{"line":92,"column":54}}]}},"s":{"0":9,"1":9,"2":9,"3":0,"4":9,"5":9,"6":9,"7":14,"8":14,"9":10,"10":7,"11":4,"12":3,"13":1,"14":0,"15":3,"16":3,"17":3,"18":3,"19":1,"20":1,"21":1,"22":1,"23":17,"24":46,"25":46,"26":6,"27":40,"28":5,"29":0,"30":5,"31":5,"32":5,"33":5,"34":2,"35":2,"36":2,"37":2,"38":68,"39":1},"f":{"0":9,"1":9,"2":14,"3":7,"4":3,"5":0,"6":1,"7":17,"8":46,"9":5,"10":2,"11":68},"b":{"0":[0],"1":[9,0],"2":[9,0],"3":[10],"4":[1],"5":[3],"6":[1],"7":[6],"8":[0],"9":[5],"10":[2],"11":[68,17]}}}}
