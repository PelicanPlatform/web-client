{"numFailedTestSuites":2,"numFailedTests":0,"numPassedTestSuites":1,"numPassedTests":9,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":2,"numTodoTests":0,"numTotalTestSuites":3,"numTotalTests":9,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1759439318223,"success":false,"testResults":[{"assertionResults":[],"coverage":{},"endTime":1759439324918,"message":"  ● Test suite failed to run\n\n    \u001b[96mtest/util.test.ts\u001b[0m:\u001b[93m2\u001b[0m:\u001b[93m10\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2305: \u001b[0mModule '\"../src/util\"' has no exported member 'parseHeader'.\n\n    \u001b[7m2\u001b[0m import { parseHeader, parseLinkHeader } from '../src/util';\n    \u001b[7m \u001b[0m \u001b[91m         ~~~~~~~~~~~\u001b[0m\n","name":"/home/runner/work/web-client/web-client/test/util.test.ts","startTime":1759439324918,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1759439324918,"message":"  ● Test suite failed to run\n\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m19\u001b[0m:\u001b[93m27\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 0 arguments, but got 1.\n\n    \u001b[7m19\u001b[0m   let client = new Client(\"https://example.com\")\n    \u001b[7m  \u001b[0m \u001b[91m                          ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m21\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getMetadata' does not exist on type 'Client'.\n\n    \u001b[7m21\u001b[0m   await expect(client.getMetadata())\n    \u001b[7m  \u001b[0m \u001b[91m                      ~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m37\u001b[0m:\u001b[93m27\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 0 arguments, but got 1.\n\n    \u001b[7m37\u001b[0m   let client = new Client(\"https://example.com\")\n    \u001b[7m  \u001b[0m \u001b[91m                          ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m39\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getMetadata' does not exist on type 'Client'.\n\n    \u001b[7m39\u001b[0m   await expect(client.getMetadata())\n    \u001b[7m  \u001b[0m \u001b[91m                      ~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m46\u001b[0m:\u001b[93m56\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2769: \u001b[0mNo overload matches this call.\n      Overload 1 of 3, '(object: Client, method: never): SpyInstance<never, never, any>', gave the following error.\n        Argument of type '\"getMetadata\"' is not assignable to parameter of type 'never'.\n      Overload 2 of 3, '(object: Client, method: \"get\" | \"list\" | \"put\" | \"permissions\" | \"parseObjectUrl\" | \"exchangeCodeForToken\" | \"getFederation\" | \"getNamespace\" | \"queueRequestAndStartFlow\" | \"processQueuedObjectRequest\"): SpyInstance<...>', gave the following error.\n        Argument of type '\"getMetadata\"' is not assignable to parameter of type '\"get\" | \"list\" | \"put\" | \"permissions\" | \"parseObjectUrl\" | \"exchangeCodeForToken\" | \"getFederation\" | \"getNamespace\" | \"queueRequestAndStartFlow\" | \"processQueuedObjectRequest\"'.\n\n    \u001b[7m46\u001b[0m   const getMetadataMock = jest.spyOn(Client.prototype, \"getMetadata\")\n    \u001b[7m  \u001b[0m \u001b[91m                                                       ~~~~~~~~~~~~~\u001b[0m\n\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m47\u001b[0m:\u001b[93m24\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any>' is not assignable to parameter of type '() => ProxiedValue<Record<string, Federation>> | Record<string, string> | ProxiedValue<QueuedRequest[]> | ... 10 more ... | (() => Promise<...>)'.\n      Type 'Promise<any>' is not assignable to type 'ProxiedValue<Record<string, Federation>> | Record<string, string> | ProxiedValue<QueuedRequest[]> | ... 10 more ... | (() => Promise<...>)'.\n        Type 'Promise<any>' is not assignable to type 'Record<string, string>'.\n          Index signature for type 'string' is missing in type 'Promise<any>'.\n\n    \u001b[7m47\u001b[0m    .mockImplementation(async () : Promise<any> => {\n    \u001b[7m  \u001b[0m \u001b[91m                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m53\u001b[0m:\u001b[93m27\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 0 arguments, but got 1.\n\n    \u001b[7m53\u001b[0m   let client = new Client(\"https://example.com\")\n    \u001b[7m  \u001b[0m \u001b[91m                          ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m55\u001b[0m:\u001b[93m23\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getObject' does not exist on type 'Client'.\n\n    \u001b[7m55\u001b[0m   await expect(client.getObject(\"/test.txt\"))\n    \u001b[7m  \u001b[0m \u001b[91m                      ~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m68\u001b[0m:\u001b[93m55\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2769: \u001b[0mNo overload matches this call.\n      Overload 1 of 3, '(object: typeof import(\"/home/runner/work/web-client/web-client/src/Client\"), method: \"Client\" | \"default\"): SpyInstance<Client, [], any>', gave the following error.\n        Argument of type '\"downloadUrl\"' is not assignable to parameter of type '\"Client\" | \"default\"'.\n      Overload 2 of 3, '(object: typeof import(\"/home/runner/work/web-client/web-client/src/Client\"), method: never): SpyInstance<never, never, any>', gave the following error.\n        Argument of type '\"downloadUrl\"' is not assignable to parameter of type 'never'.\n\n    \u001b[7m68\u001b[0m   const downloadUrlMock = jest.spyOn(ClientFunctions, \"downloadUrl\")\n    \u001b[7m  \u001b[0m \u001b[91m                                                      ~~~~~~~~~~~~~\u001b[0m\n\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m69\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<void>' is not assignable to parameter of type '() => typeof Client'.\n      Property 'prototype' is missing in type 'Promise<void>' but required in type 'typeof Client'.\n\n    \u001b[7m69\u001b[0m     .mockImplementationOnce(async () => {})\n    \u001b[7m  \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m71\u001b[0m:\u001b[93m56\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2769: \u001b[0mNo overload matches this call.\n      Overload 1 of 3, '(object: Client, method: never): SpyInstance<never, never, any>', gave the following error.\n        Argument of type '\"getMetadata\"' is not assignable to parameter of type 'never'.\n      Overload 2 of 3, '(object: Client, method: \"get\" | \"list\" | \"put\" | \"permissions\" | \"parseObjectUrl\" | \"exchangeCodeForToken\" | \"getFederation\" | \"getNamespace\" | \"queueRequestAndStartFlow\" | \"processQueuedObjectRequest\"): SpyInstance<...>', gave the following error.\n        Argument of type '\"getMetadata\"' is not assignable to parameter of type '\"get\" | \"list\" | \"put\" | \"permissions\" | \"parseObjectUrl\" | \"exchangeCodeForToken\" | \"getFederation\" | \"getNamespace\" | \"queueRequestAndStartFlow\" | \"processQueuedObjectRequest\"'.\n\n    \u001b[7m71\u001b[0m   const getMetadataMock = jest.spyOn(Client.prototype, \"getMetadata\")\n    \u001b[7m  \u001b[0m \u001b[91m                                                       ~~~~~~~~~~~~~\u001b[0m\n\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m72\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2345: \u001b[0mArgument of type '() => Promise<any>' is not assignable to parameter of type '() => ProxiedValue<Record<string, Federation>> | Record<string, string> | ProxiedValue<QueuedRequest[]> | ... 10 more ... | (() => Promise<...>)'.\n      Type 'Promise<any>' is not assignable to type 'ProxiedValue<Record<string, Federation>> | Record<string, string> | ProxiedValue<QueuedRequest[]> | ... 10 more ... | (() => Promise<...>)'.\n        Type 'Promise<any>' is not assignable to type 'Record<string, string>'.\n          Index signature for type 'string' is missing in type 'Promise<any>'.\n\n    \u001b[7m72\u001b[0m     .mockImplementationOnce(async () : Promise<any> => {\n    \u001b[7m  \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m91\u001b[0m:\u001b[93m27\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 0 arguments, but got 1.\n\n    \u001b[7m91\u001b[0m   let client = new Client(\"https://example.com\")\n    \u001b[7m  \u001b[0m \u001b[91m                          ~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m92\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getObject' does not exist on type 'Client'.\n\n    \u001b[7m92\u001b[0m   await client.getObject(testFilePath)\n    \u001b[7m  \u001b[0m \u001b[91m               ~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m106\u001b[0m:\u001b[93m19\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'downloadUrl' does not exist on type 'typeof import(\"/home/runner/work/web-client/web-client/src/Client\")'.\n\n    \u001b[7m106\u001b[0m   ClientFunctions.downloadUrl(testBlobUrl, testFileName)\n    \u001b[7m   \u001b[0m \u001b[91m                  ~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m125\u001b[0m:\u001b[93m19\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'downloadUrl' does not exist on type 'typeof import(\"/home/runner/work/web-client/web-client/src/Client\")'.\n\n    \u001b[7m125\u001b[0m   ClientFunctions.downloadUrl(testBlobUrl)\n    \u001b[7m   \u001b[0m \u001b[91m                  ~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m138\u001b[0m:\u001b[93m29\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2554: \u001b[0mExpected 0 arguments, but got 1.\n\n    \u001b[7m138\u001b[0m   const client = new Client(\"https://127.0.0.1:80\")\n    \u001b[7m   \u001b[0m \u001b[91m                            ~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n    \u001b[96mtest/index.test.ts\u001b[0m:\u001b[93m139\u001b[0m:\u001b[93m16\u001b[0m - \u001b[91merror\u001b[0m\u001b[90m TS2339: \u001b[0mProperty 'getObject' does not exist on type 'Client'.\n\n    \u001b[7m139\u001b[0m   await client.getObject(\"/mnt/test.txt\")\n    \u001b[7m   \u001b[0m \u001b[91m               ~~~~~~~~~\u001b[0m\n","name":"/home/runner/work/web-client/web-client/test/index.test.ts","startTime":1759439324918,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Testing sessionObject"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Create a session backed object","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"Create a session backed object"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Modify a property and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Modify a property and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Modify a nested property and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Modify a nested property and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Add a new property and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Add a new property and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Delete a property and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Delete a property and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Add a value to a list and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Add a value to a list and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Delete a value from a list and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Delete a value from a list and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Delete a value from a nested object and check session storage is updated","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Delete a value from a nested object and check session storage is updated"},{"ancestorTitles":["Testing sessionObject"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"Testing sessionObject Create a proxied object then set its value to a empty object","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"Create a proxied object then set its value to a empty object"}],"endTime":1759439324827,"message":"","name":"/home/runner/work/web-client/web-client/test/sessionStorage.test.ts","startTime":1759439318868,"status":"passed","summary":""}],"wasInterrupted":false,"coverageMap":{"/home/runner/work/web-client/web-client/src/util/sessionObject.ts":{"path":"/home/runner/work/web-client/web-client/src/util/sessionObject.ts","statementMap":{"0":{"start":{"line":12,"column":30},"end":{"line":12,"column":61}},"1":{"start":{"line":15,"column":18},"end":{"line":15,"column":45}},"2":{"start":{"line":16,"column":1},"end":{"line":18,"column":2}},"3":{"start":{"line":17,"column":2},"end":{"line":17,"column":66}},"4":{"start":{"line":21,"column":1},"end":{"line":21,"column":57}},"5":{"start":{"line":22,"column":1},"end":{"line":22,"column":60}},"6":{"start":{"line":28,"column":1},"end":{"line":61,"column":null}},"7":{"start":{"line":32,"column":17},"end":{"line":32,"column":42}},"8":{"start":{"line":33,"column":3},"end":{"line":37,"column":4}},"9":{"start":{"line":34,"column":4},"end":{"line":36,"column":7}},"10":{"start":{"line":35,"column":11},"end":{"line":35,"column":62}},"11":{"start":{"line":39,"column":3},"end":{"line":39,"column":16}},"12":{"start":{"line":43,"column":3},"end":{"line":47,"column":4}},"13":{"start":{"line":44,"column":4},"end":{"line":46,"column":7}},"14":{"start":{"line":45,"column":11},"end":{"line":45,"column":62}},"15":{"start":{"line":48,"column":19},"end":{"line":48,"column":51}},"16":{"start":{"line":49,"column":3},"end":{"line":51,"column":4}},"17":{"start":{"line":50,"column":4},"end":{"line":50,"column":56}},"18":{"start":{"line":52,"column":3},"end":{"line":52,"column":18}},"19":{"start":{"line":55,"column":19},"end":{"line":55,"column":52}},"20":{"start":{"line":56,"column":3},"end":{"line":58,"column":4}},"21":{"start":{"line":57,"column":4},"end":{"line":57,"column":56}},"22":{"start":{"line":59,"column":3},"end":{"line":59,"column":18}},"23":{"start":{"line":67,"column":1},"end":{"line":92,"column":null}},"24":{"start":{"line":69,"column":17},"end":{"line":69,"column":42}},"25":{"start":{"line":70,"column":3},"end":{"line":72,"column":4}},"26":{"start":{"line":71,"column":4},"end":{"line":71,"column":76}},"27":{"start":{"line":73,"column":3},"end":{"line":73,"column":16}},"28":{"start":{"line":76,"column":3},"end":{"line":78,"column":4}},"29":{"start":{"line":77,"column":4},"end":{"line":77,"column":77}},"30":{"start":{"line":79,"column":19},"end":{"line":79,"column":51}},"31":{"start":{"line":80,"column":3},"end":{"line":82,"column":4}},"32":{"start":{"line":81,"column":4},"end":{"line":81,"column":20}},"33":{"start":{"line":83,"column":3},"end":{"line":83,"column":18}},"34":{"start":{"line":86,"column":19},"end":{"line":86,"column":52}},"35":{"start":{"line":87,"column":3},"end":{"line":89,"column":4}},"36":{"start":{"line":88,"column":4},"end":{"line":88,"column":20}},"37":{"start":{"line":90,"column":3},"end":{"line":90,"column":18}},"38":{"start":{"line":96,"column":1},"end":{"line":96,"column":52}},"39":{"start":{"line":99,"column":0},"end":{"line":99,"column":29}}},"fnMap":{"0":{"name":"sessionObject","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":22}},"loc":{"start":{"line":9,"column":62},"end":{"line":23,"column":1}}},"1":{"name":"createSessionObjectHandler","decl":{"start":{"line":25,"column":9},"end":{"line":25,"column":35}},"loc":{"start":{"line":26,"column":12},"end":{"line":62,"column":1}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":7},"end":{"line":29,"column":16}},"loc":{"start":{"line":29,"column":39},"end":{"line":40,"column":3}}},"3":{"name":"(anonymous_3)","decl":{"start":{"line":35,"column":5},"end":{"line":35,"column":8}},"loc":{"start":{"line":35,"column":11},"end":{"line":35,"column":62}}},"4":{"name":"(anonymous_4)","decl":{"start":{"line":41,"column":7},"end":{"line":41,"column":16}},"loc":{"start":{"line":41,"column":51},"end":{"line":53,"column":3}}},"5":{"name":"(anonymous_5)","decl":{"start":{"line":45,"column":5},"end":{"line":45,"column":8}},"loc":{"start":{"line":45,"column":11},"end":{"line":45,"column":62}}},"6":{"name":"(anonymous_6)","decl":{"start":{"line":54,"column":2},"end":{"line":54,"column":16}},"loc":{"start":{"line":54,"column":46},"end":{"line":60,"column":3}}},"7":{"name":"createSessionObjectChildHandler","decl":{"start":{"line":64,"column":9},"end":{"line":64,"column":40}},"loc":{"start":{"line":65,"column":26},"end":{"line":93,"column":1}}},"8":{"name":"(anonymous_8)","decl":{"start":{"line":68,"column":7},"end":{"line":68,"column":16}},"loc":{"start":{"line":68,"column":39},"end":{"line":74,"column":3}}},"9":{"name":"(anonymous_9)","decl":{"start":{"line":75,"column":7},"end":{"line":75,"column":16}},"loc":{"start":{"line":75,"column":51},"end":{"line":84,"column":3}}},"10":{"name":"(anonymous_10)","decl":{"start":{"line":85,"column":2},"end":{"line":85,"column":16}},"loc":{"start":{"line":85,"column":46},"end":{"line":91,"column":3}}},"11":{"name":"isObjectOrArray","decl":{"start":{"line":95,"column":9},"end":{"line":95,"column":24}},"loc":{"start":{"line":95,"column":35},"end":{"line":97,"column":1}}}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":1},"end":{"line":18,"column":2}},"type":"if","locations":[{"start":{"line":16,"column":1},"end":{"line":18,"column":2}}]},"1":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":54}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":48}},{"start":{"line":21,"column":52},"end":{"line":21,"column":54}}]},"2":{"loc":{"start":{"line":22,"column":21},"end":{"line":22,"column":36}},"type":"binary-expr","locations":[{"start":{"line":22,"column":21},"end":{"line":22,"column":25}},{"start":{"line":22,"column":29},"end":{"line":22,"column":36}}]},"3":{"loc":{"start":{"line":33,"column":3},"end":{"line":37,"column":4}},"type":"if","locations":[{"start":{"line":33,"column":3},"end":{"line":37,"column":4}}]},"4":{"loc":{"start":{"line":43,"column":3},"end":{"line":47,"column":4}},"type":"if","locations":[{"start":{"line":43,"column":3},"end":{"line":47,"column":4}}]},"5":{"loc":{"start":{"line":49,"column":3},"end":{"line":51,"column":4}},"type":"if","locations":[{"start":{"line":49,"column":3},"end":{"line":51,"column":4}}]},"6":{"loc":{"start":{"line":56,"column":3},"end":{"line":58,"column":4}},"type":"if","locations":[{"start":{"line":56,"column":3},"end":{"line":58,"column":4}}]},"7":{"loc":{"start":{"line":70,"column":3},"end":{"line":72,"column":4}},"type":"if","locations":[{"start":{"line":70,"column":3},"end":{"line":72,"column":4}}]},"8":{"loc":{"start":{"line":76,"column":3},"end":{"line":78,"column":4}},"type":"if","locations":[{"start":{"line":76,"column":3},"end":{"line":78,"column":4}}]},"9":{"loc":{"start":{"line":80,"column":3},"end":{"line":82,"column":4}},"type":"if","locations":[{"start":{"line":80,"column":3},"end":{"line":82,"column":4}}]},"10":{"loc":{"start":{"line":87,"column":3},"end":{"line":89,"column":4}},"type":"if","locations":[{"start":{"line":87,"column":3},"end":{"line":89,"column":4}}]},"11":{"loc":{"start":{"line":96,"column":8},"end":{"line":96,"column":51}},"type":"binary-expr","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":33}},{"start":{"line":96,"column":37},"end":{"line":96,"column":51}}]}},"s":{"0":9,"1":9,"2":9,"3":0,"4":9,"5":9,"6":9,"7":14,"8":14,"9":10,"10":7,"11":4,"12":3,"13":1,"14":0,"15":3,"16":3,"17":3,"18":3,"19":1,"20":1,"21":1,"22":1,"23":17,"24":46,"25":46,"26":6,"27":40,"28":5,"29":0,"30":5,"31":5,"32":5,"33":5,"34":2,"35":2,"36":2,"37":2,"38":68,"39":1},"f":{"0":9,"1":9,"2":14,"3":7,"4":3,"5":0,"6":1,"7":17,"8":46,"9":5,"10":2,"11":68},"b":{"0":[0],"1":[9,0],"2":[9,0],"3":[10],"4":[1],"5":[3],"6":[1],"7":[6],"8":[0],"9":[5],"10":[2],"11":[68,17]}}}}
